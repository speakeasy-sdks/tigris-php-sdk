<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace tigris\core\Models\Shared;


class SearchRequest
{
    /**
     * Optionally specify a database branch name to perform operation on
     * 
     * @var ?string $branch
     */
	#[\JMS\Serializer\Annotation\SerializedName('branch')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $branch = null;
    
    /**
     * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
     * 
     * @var ?\tigris\core\Models\Shared\Collation $collation
     */
	#[\JMS\Serializer\Annotation\SerializedName('collation')]
    #[\JMS\Serializer\Annotation\Type('tigris\core\Models\Shared\Collation')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Collation $collation = null;
    
    /**
     * Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
     * 
     * @var ?array<string> $excludeFields
     */
	#[\JMS\Serializer\Annotation\SerializedName('exclude_fields')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $excludeFields = null;
    
    /**
     * Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.
     * 
     * @var ?\tigris\core\Models\Shared\SearchRequestFacet $facet
     */
	#[\JMS\Serializer\Annotation\SerializedName('facet')]
    #[\JMS\Serializer\Annotation\Type('tigris\core\Models\Shared\SearchRequestFacet')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SearchRequestFacet $facet = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('fields')]
    #[\JMS\Serializer\Annotation\Type('tigris\core\Models\Shared\SearchRequestFields')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SearchRequestFields $fields = null;
    
    /**
     * Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
     * 
     * @var ?\tigris\core\Models\Shared\SearchRequestFilter $filter
     */
	#[\JMS\Serializer\Annotation\SerializedName('filter')]
    #[\JMS\Serializer\Annotation\Type('tigris\core\Models\Shared\SearchRequestFilter')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SearchRequestFilter $filter = null;
    
    /**
     * Array of document field names to include in results. By default, all fields are included.
     * 
     * @var ?array<string> $includeFields
     */
	#[\JMS\Serializer\Annotation\SerializedName('include_fields')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $includeFields = null;
    
    /**
     * Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
     * 
     * @var ?int $page
     */
	#[\JMS\Serializer\Annotation\SerializedName('page')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $page = null;
    
    /**
     * Optionally can set the number of hits to be returned per page, default is 20.
     * 
     * @var ?int $pageSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('page_size')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $pageSize = null;
    
    /**
     * Query string for searching across text fields
     * 
     * @var ?string $q
     */
	#[\JMS\Serializer\Annotation\SerializedName('q')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $q = null;
    
    /**
     * Array of fields to project search query against
     * 
     * @var ?array<string> $searchFields
     */
	#[\JMS\Serializer\Annotation\SerializedName('search_fields')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $searchFields = null;
    
    /**
     * Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`
     * 
     * @var ?\tigris\core\Models\Shared\SearchRequestSort $sort
     */
	#[\JMS\Serializer\Annotation\SerializedName('sort')]
    #[\JMS\Serializer\Annotation\Type('tigris\core\Models\Shared\SearchRequestSort')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SearchRequestSort $sort = null;
    
	public function __construct()
	{
		$this->branch = null;
		$this->collation = null;
		$this->excludeFields = null;
		$this->facet = null;
		$this->fields = null;
		$this->filter = null;
		$this->includeFields = null;
		$this->page = null;
		$this->pageSize = null;
		$this->q = null;
		$this->searchFields = null;
		$this->sort = null;
	}
}
